@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Core.Models



@{
	Layout = "mainTemplate.cshtml";

    ViewBag.Title = Model.Value("pagetitle");

  var selection = Umbraco.Content(Guid.Parse("5d2b9a88-d381-4f26-8f2a-76ef9a6247cb"))
    .ChildrenOfType("serviceItemTemplate")
    .Where(x => x.IsVisible());




        

    var itemsPage = 6;

    if (!int.TryParse(Context.Request.Query["page"], out int currentPage))
        currentPage = 1;

    var totalItems = selection?.Count() ?? 0;
    var pagedItems = selection.Skip((currentPage - 1) * itemsPage).Take(itemsPage);


}

<div class="breadcrumb-main-container">

    @await Html.PartialAsync("~/Views/Partials/Static/breadcrumb.cshtml")

</div>



<div class="services-page-wrapper">

    <div class="services-page-container-header">
        <p class="header-underneath-miniheader">We Provide The Solutions To Grow Your Business Faster</p>
    </div>

    <!-- Class below is located in stylesheet _Home -->

    <div class="services-render-services-container">
  
    @if (pagedItems != null)
    {
        @foreach (var item in pagedItems)
        {

            <!-- service-infobox-partial resides in home.scss -->
            <a href="@item.Url()">

                <div class="services-infobox-partial service-page-container-items">
                    

                    <div class="header-service-box-container">

                        <p class="header-service-box">@item.Value("pageTitle")</p>

                    </div>

                    @{
                        var imageThumbnail = item.Value<MediaWithCrops>("imageThumbnail");
                    }
                    
                
                    <img class="services-infobox-image" src="@imageThumbnail.MediaUrl()"/>
        


                    <p class="main-content-components services-infobox-text">

                        @item.Value("descriptionThumbnail")

                    </p>

                </div>
            </a>
        }
    }
          
     


        
    </div>

    <div class="services-page-container-pagination">

        @if (currentPage > 1)
        {
            <a href="?page=@(currentPage - 1)">Prev</a>
        }
        else 
        {
            <span>Prev</span>
        }

        @for (int i = 1; i <= Math.Ceiling((decimal)totalItems / itemsPage); i++)
        {
            if(currentPage != i)
            {
                <a href="?page=@i">@i</a>
                
            }else
            {
                <div class="service-pagination-current">
                    <a href="?page=@i">@i</a>
                </div>
            }

        }

        @if (currentPage < Math.Ceiling((decimal)totalItems / itemsPage))
        {
            <a href="?page=@(currentPage + 1)">Next</a>
        }
        else 
        {
            <span>Next</span>
        }

    </div>

    <div class="services-page-container-footer">   
        <!--Need to create a partial here-->

        @await Html.PartialAsync("~/Views/Partials/Static/letUsKnowPartial.cshtml")


    </div>

</div>



